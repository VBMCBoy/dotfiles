" All system-wide defaults are set in $VIMRUNTIME/archlinux.vim (usually just
" /usr/share/vim/vimfiles/archlinux.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vimrc), since archlinux.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing archlinux.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages.
" runtime! archlinux.vim

" If you prefer the old-style vim functionalty, add 'runtime! vimrc_example.vim'
" Or better yet, read /usr/share/vim/vim80/vimrc_example.vim or the vim manual
" and configure vim to your own liking!

" do not load defaults if ~/.vimrc is missing
"let skip_defaults_vim=1

set laststatus=2
filetype off

set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath = &runtimepath

if &compatible
        set nocompatible
endif

set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim

"       if dein#load_state('~/.cache/dein')
"         call dein#begin('~/.cache/dein')

"         call dein#add('~/.cache/dein/repos/github.com/Shougo/dein.vim')

"         " my plugins
"         call dein#add('scrooloose/nerdtree')
"         call dein#add('scrooloose/nerdcommenter')
"         call dein#add('Xuyuanp/nerdtree-git-plugin')
"         call dein#add('tiagofumo/vim-nerdtree-syntax-highlight')
"         call dein#add('kyazdani42/nvim-web-devicons')
"         call dein#add('famiu/feline.nvim')
"         call dein#add('tpope/vim-surround')
"         call dein#add('vimwiki/vimwiki')
"         call dein#add('Shougo/context_filetype.vim')
"         call dein#add('nvim-lua/popup.nvim')
"         call dein#add('nvim-lua/plenary.nvim')
"         call dein#add('nvim-telescope/telescope.nvim')
"         call dein#add('lewis6991/gitsigns.nvim')
"         " languages
"         call dein#add('neovim/nvim-lspconfig')
"         call dein#add('hrsh7th/nvim-compe') " generic autocomplete
"         call dein#add('nvim-treesitter/nvim-treesitter', {'hook_post_update': 'TSUpdate'})
"         call dein#add('lervag/vimtex') " LaTeX

"         if !has('nvim')
"           call dein#add('roxma/nvim-yarp')
"           call dein#add('roxma/vim-hug-neovim-rpc')
"         endif

"         call dein#end()
"         call dein#save_state()
"       endif

"       call dein#install()

" Plugins end
filetype plugin indent on

" Copy/Paste on right register
" set clipboard=unnamedplus

" better word wrapping
" set linebreak
" set breakindent

" traverse line breaks with arrow keys
" set whichwrap=b,s,<,>,[,]

" line numbers
" set number
" set rnu

" color scheme
" syntax on


" Tabs
"       set tabstop=4        " visual spaces per TAB
"       set softtabstop=4    " number of spaces in tab when editing
"       set expandtab        " tabs are spaces

"       set cursorline       " highlight current line

"       set lazyredraw       " redraw only when we need to.

"       set showmatch        " highlight matching [{()}]

"       set incsearch        " search as characters are entered
"       set hlsearch         " highlight matches

"       set foldenable       " enable folding
"       set foldlevelstart=5 " 5 nested fold max
" space open / closes folds
" nnoremap <space> za
" set foldmethod=indent
" let g:powerline_pycmd="py3"

" set termguicolors

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" NERDTree
nmap <C-n> :NERDTreeToggle<CR>
autocmd StdinReadPre * lead s:std_in=1
autocmd VimEnter * NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" for vim-devicons
" set encoding=UTF-8

" for LaTeX:
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_concel='abdmg'
let g:vimtex_complete_close_braces=1
let g:vimtex_compiler_progname = 'nvr'

" Telescope
" nnoremap <leader>ff <cmd>Telescope find_files<cr>

" nvim-compe
"       set completeopt=menuone,noselect
"       inoremap <silent><expr> <C-Space> compe#complete()
"       inoremap <silent><expr> <CR>      compe#confirm('<CR>')
"       inoremap <silent><expr> <C-e>     compe#close('<C-e>')
"       inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
"       inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })

" LSP (nvim-compe, nvim-lspconfig, treesitter)
lua << EOF
local lspconfig = require'lspconfig'
lspconfig.pyright.setup{}
lspconfig.ccls.setup {
        init_options = {
                compilationDatabaseDirectory = 'build';
                index = {
                        threads = 0;
                };
        }
}
require'compe'.setup {
        enabled = true;
        autocomplete = true;
        debug = false;
        min_length = 1;
        preselect = 'enable';
        throttle_time = 80;
        source_timeout = 200;
        incomplete_delay = 400;
        max_abbr_width = 100;
        max_kind_width = 100;
        max_menu_width = 100;
        documentation = true;

        source = {
                path = true;
                buffer = true;
                calc = true;
                nvim_lua = true;
                nvim_lsp = true;
        };
}

local t = function(str)
        return vim.api.nvim_replace_termcodes(str, true, true, true)
end

local check_back_space = function()
        local col = vim.fn.col('.') - 1
        if col == 0 or vim.fn.getline('.'):sub(col, col):match('%s') then
                return true
        else
                return false
        end
end

-- Use (s-)tab to:
--- move to prev/next item in completion menuone
--- jump to prev/next snippet's placeholder
_G.tab_complete = function()
  if vim.fn.pumvisible() == 1 then
    return t "<C-n>"
  elseif check_back_space() then
    return t "<Tab>"
  else
    return vim.fn['compe#complete']()
  end
end
_G.s_tab_complete = function()
  if vim.fn.pumvisible() == 1 then
    return t "<C-p>"
  else
    return t "<S-Tab>"
  end
end

vim.api.nvim_set_keymap("i", "<Tab>", "v:lua.tab_complete()", {expr = true})
vim.api.nvim_set_keymap("s", "<Tab>", "v:lua.tab_complete()", {expr = true})
vim.api.nvim_set_keymap("i", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})
vim.api.nvim_set_keymap("s", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})

require'nvim-treesitter.configs'.setup {
        ensure_installed = { "c", "javascript", "python", "bash", "json", "lua" },
        highlight = {
                enable = true,
                },
        indent = {
                enable = true,
                },
}
EOF

" gitsigns
lua << EOF
require('gitsigns').setup()
EOF

" nvim-web-devicons
lua << EOF
require'nvim-web-devicons'.setup {
        default = true;
}
EOF

" feline
lua << EOF
require('feline').setup({
})
EOF

